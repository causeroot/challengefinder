#!/bin/bash -x

MYSQL_ROOT_PASSWORD="$1"
export RAILS_ENV=production
echo "gem: --no-ri --no-rdoc" > ~/.gemrc

# do this in the background to take advantage of entropy generated by apt-get
sudo apt-get update -y
sudo apt-get upgrade -y
# install the first batch of supporting software
sudo apt-get remove ruby -y

sudo apt-get install ruby1.9.1 ruby1.9.1-dev rubygems1.9.1 irb1.9.1 \
    ri1.9.1 rdoc1.9.1 build-essential libopenssl-ruby1.9.1 libssl-dev \
    zlib1g-dev -y

sudo apt-get install unattended-upgrades git apticron ruby1.9.1 ruby1.9.1-dev \
    libxslt-dev libxml2-dev libnokogiri-ruby1.9.1 sqlite3 openjdk-6-jdk \
    solr-tomcat vim debconf-utils apache2 apache2-dev libapache2-mod-passenger \
    libmysql-ruby libmysqlclient-dev rake libsqlite3-dev ruby-sqlite3 \
    apache2-threaded-dev libcurl4-openssl-dev libapr1-dev libaprutil1-dev -y

sudo dd if=/dev/zero of=/swap bs=1M count=1024
sudo mkswap /swap
sudo swapon /swap

sudo update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 \
         --slave   /usr/share/man/man1/ruby.1.gz ruby.1.gz \
                        /usr/share/man/man1/ruby1.9.1.1.gz \
        --slave   /usr/bin/ri ri /usr/bin/ri1.9.1 \
        --slave   /usr/bin/irb irb /usr/bin/irb1.9.1 \
        --slave   /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1

sudo update-alternatives --install /usr/bin/gem gem /usr/bin/gem1.9.1 400

# set notifications for auto-update
sudo sed --in-place 's/EMAIL="root"/EMAIL="info@causeroot.org"/g' /etc/apticron/apticron.conf

if [ -n "${MYSQL_ROOT_PASSWORD}" ]; then    
    echo "Using root password: ${MYSQL_ROOT_PASSWORD}"

    echo "mysql-server-5.5	mysql-server/root_password_again	password	${MYSQL_ROOT_PASSWORD}" > mysql.seed
    echo "mysql-server-5.5	mysql-server/root_password	password	${MYSQL_ROOT_PASSWORD}" >> mysql.seed
    echo "mysql-server-5.5	mysql-server-5.5/postrm_remove_databases	boolean	false" >> mysql.seed
    echo "mysql-server-5.5	mysql-server-5.5/start_on_boot	boolean	true" >> mysql.seed
    echo "mysql-server-5.5	mysql-server-5.5/really_downgrade	boolean	false" >> mysql.seed

    cat mysql.seed | sudo debconf-set-selections

    sudo apt-get install mysql-server-5.5 -y

    mysqladmin --user="root" --password="${MYSQL_ROOT_PASSWORD}" create challengefinder
    mysql --user="root" --password="${MYSQL_ROOT_PASSWORD}" -e "GRANT ALL PRIVILEGES ON challengefinder.* TO challengefinder@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}'"
    mysqladmin --user="root" --password="${MYSQL_ROOT_PASSWORD}" flush-privileges
    rm -f mysql.seed
fi

sudo gem install bundler

if [ -d challengefinder ]; then
    echo "Directory already exists. Updating current repo"
    # pull updated from the repo
    cd challengefinder;
    git pull origin
    sudo bundle install
    rake db:migrate
    touch tmp/restart.txt
    cd ..
else
    echo "Cloning new repo"
    git clone https://github.com/causeroot/challengefinder.git
    cd challengefinder
cat <<'EOF' > config/database.yml
production:
    adapter: mysql
    encoding: utf8
    database: challengefinder
    username: challengefinder
    password: MYSQL_ROOT_PASSWORD
    host: 127.0.0.1
    port: 3306
EOF
    sed --in-place "s/MYSQL_ROOT_PASSWORD/$MYSQL_ROOT_PASSWORD/g" config/database.yml
    mkdir -p tmp
    mkdir -p log
    sudo bundle install
    rake db:migrate
    rake sunspot:solr:start
    rake db:seed
    bundle exec rake assets:precompile RAILS_ENV=production
    touch tmp/restart.txt
fi

cat <<'EOF' > challengefinder.conf
<VirtualHost *:80>
    ServerName www.challengefinder.org
    DocumentRoot /home/ubuntu/challengefinder/public
    RailsEnv production
    <Directory /home/ubuntu/challengefinder/public>
        Allow from all
        Options -MultiViews
    </Directory>
</VirtualHost>
EOF

sudo mv challengefinder.conf /etc/apache2/sites-available/challengefinder
sudo mv /etc/apache2/sites-enabled/000-default /etc/apache2/sites-enabled/old-default

sudo a2enmod passenger
sudo a2ensite challengefinder
sudo service apache2 reload

